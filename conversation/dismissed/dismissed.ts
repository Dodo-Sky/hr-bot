import { type Context, InlineKeyboard, NextFunction } from 'grammy';
import { type Conversation } from '@grammyjs/conversations';
import { getDataFromServer, postDataServer } from '../../services/api';
import { Staff, ContactStaff } from '../../type/type';
import { parse, isValid } from 'date-fns';

async function getStaffAndContact(idContact: string): Promise<any> {
  const dismissed = await getDataFromServer('dismissed');
  const staff: Staff = dismissed.find((el: { contact: [] }) =>
    el.contact?.find((elem: ContactStaff) => elem.idContact === idContact),
  );
  const contactStaff: ContactStaff = staff.contact.find((el) => el.idContact === idContact);
  return [staff, contactStaff];
}

export async function instructions(conversation: Conversation, ctx: Context) {
  const [, idContact] = await ctx.callbackQuery?.data!.split('+')!;

  // –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  const [staff, contactStaff] = await conversation.external(() => getStaffAndContact(idContact));

  // –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É–≤–æ–ª–µ–Ω–Ω—ã–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
  await ctx.reply(
    `–í—ã –±—É–¥–µ—Ç–µ —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å ${staff.lastName} ${staff.firstName} ${staff.patronymicName}?
         
–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏
${staff.phoneNumber}`,
    {
      reply_markup: new InlineKeyboard()
        .text('–ü—Ä–∏–≥–ª–∞—à–∞–µ–º', '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º')
        .row()
        .text('–ù–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º', '–ù–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º')
        .row()
        .text('–í —Ä–µ–∑–µ—Ä–≤ (–ø–æ–∫–∞ —à—Ç–∞—Ç —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω)', '–í —Ä–µ–∑–µ—Ä–≤ (–ø–æ–∫–∞ —à—Ç–∞—Ç —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω)'),
    },
  );

  const survey = await conversation.waitForCallbackQuery(
    ['–ü—Ä–∏–≥–ª–∞—à–∞–µ–º', '–ù–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º', '–í —Ä–µ–∑–µ—Ä–≤ (–ø–æ–∫–∞ —à—Ç–∞—Ç —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω)'],
    {
      otherwise: async (ctx) => {
        await ctx.reply(`–û–®–ò–ë–ö–ê!!! –í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –ø–æ ${staff.lastName} ${staff.firstName}`);
      },
    },
  );

  // –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  if (survey.callbackQuery.data === '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º') {
    await survey.answerCallbackQuery(survey.callbackQuery.data);

    // –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
    await conversation.external(() => {
      contactStaff.resolutionManager = '–î–∞';
      postDataServer('dismissed', contactStaff);
    });
    if (staff.positionName === '–ê–≤—Ç–æ, –ª–∏—á–Ω–æ–µ –¢–°' || staff.positionName === '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π') {
      await ctx.reply(
        `
${staff.firstName}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! üëã

–≠—Ç–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –î–æ–¥–æ –ø–∏—Ü—Ü—ã. –†–∞–Ω–µ–µ, –í—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±—è –≤ –î–æ–¥–æ –∏ –º—ã –±—ã–ª–∏ –±—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞! üöÄ

–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –í–∞—Å –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –í–∞—Å —É–¥–∏–≤—è—Ç! ü§©

üíµ –ü–æ–¥–Ω—è–ª–∏ —Å—Ç–∞–≤–∫—É –∑–∞ –∫–º, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ì–°–ú!
üí∞ –í–Ω–µ–¥—Ä–∏–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –æ–ø–ª–∞—Ç—É –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –∑–∞ —Å–≤–æ—é —É—Å–ª—É–≥—É! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –í–∞—à –¥–æ—Ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –≤—ã—à–µ!
‚ú® –†–∞—Å—à–∏—Ä–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å, –Ω–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π!

–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ? ü§î –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–µ–µ, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –ø–æ–Ω—è—Ç—å –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞–º–∏. üí¨

–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ? –ì–æ—Ç–æ–≤—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–º –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ? üí∏

–ë—É–¥—É –∂–¥–∞—Ç—å –æ—Ç –í–∞—Å –æ—Ç–≤–µ—Ç–∞! üì≤`,
      );
    } else {
      await ctx.reply(`
${staff.firstName}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å/–≤–µ—á–µ—Ä! üëã

–≠—Ç–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –î–æ–¥–æ –ø–∏—Ü—Ü—ã. –ú—ã –ø–æ–º–Ω–∏–º –í–∞—Å –∫–∞–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—à–∏—Ö –ª—É—á—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∏ –º—ã –±—ã–ª–∏ –±—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!

üì¢ –í—ã –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤–∞—à–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤ –î–æ–¥–æ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!
üíµ –ø–æ–¥–Ω—è–ª–∏ —Å—Ç–∞–≤–∫—É –∑–∞ —á–∞—Å, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ.
üìñ —É–ø—Ä–æ—Å—Ç–∏–ª–∏ —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –≤–ª–∏—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç—É.
üí∞ –≤–Ω–µ–¥—Ä–∏–ª–∏ –≥–æ–¥–æ–≤–æ–π –±–æ–Ω—É—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –∑–∞ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
‚ú® —Ä–∞—Å—à–∏—Ä–∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ –∏ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!

–ï—Å–ª–∏ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∫–æ–º-–ª–∏–±–æ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏–∏, –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä. –Ø –≥–æ—Ç–æ–≤(–∞) –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤—Å–µ—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.

–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ?
–ì–æ—Ç–æ–≤—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É?

–ú—ã –∂–¥–µ–º –í–∞—Å!`);
    }

    // –æ—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
    await ctx.reply(`–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç  ${staff.lastName} ${staff.firstName}?`, {
      reply_markup: new InlineKeyboard().text('–í–µ—Ä–Ω–µ—Ç—Å—è', '–í–µ—Ä–Ω–µ—Ç—Å—è').row().text('–û—Ç–∫–∞–∑', '–û—Ç–∫–∞–∑'),
    });
    const replyStaff = await conversation.waitForCallbackQuery(['–í–µ—Ä–Ω–µ—Ç—Å—è', '–û—Ç–∫–∞–∑'], {
      otherwise: async (ctx) =>
        await ctx.reply(
          `–û–®–ò–ë–ö–ê!!! —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${staff.lastName} ${staff.firstName}`,
        ),
    });

    // –≤–æ–∑–≤—Ä–∞—Ç
    if (replyStaff.callbackQuery.data === '–í–µ—Ä–Ω–µ—Ç—Å—è') {
      await replyStaff.answerCallbackQuery(replyStaff.callbackQuery.data);
      let question = await ctx.reply('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (2019-11-30)', {
        reply_markup: { force_reply: true },
      });

      const dateComback = await conversation
        .waitForReplyTo(question.message_id, {
          otherwise: async (ctx) =>
            await ctx.reply('–û–®–ò–ë–ö–ê! —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞', {
              reply_parameters: { message_id: question.message_id },
            }),
        })
        .and((ctx) => isValid(parse(ctx.msg?.text || '', 'yyyy-MM-dd', new Date())), {
          otherwise: async (ctx) => await ctx.reply('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ'),
        });
      await conversation.external(() => {
        const parsed = parse(dateComback.msg.text, 'yyyy-MM-dd', new Date());
        const formatted = format(parsed, 'yyyy-MM-dd');
        staff.dateBack = formatted;
        postDataServer('dismissedBot', staff);
        contactStaff.result = `–£—Å–ø–µ—à–Ω—ã–π –∑–≤–æ–Ω–æ–∫ - –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ ${formatted}`;
        postDataServer('dismissed', contactStaff);
      });

      await ctx.reply(`–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç  <b>–ø—Ä–∏–Ω—è—Ç</b>`, {
        parse_mode: 'HTML',
      });
    }

    // –æ—Ç–∫–∞–∑ –≤–µ—Ä–Ω—É—Ç—Å—è
    if (replyStaff.callbackQuery.data === '–û—Ç–∫–∞–∑') {
      await replyStaff.answerCallbackQuery(replyStaff.callbackQuery.data);
      let question = await ctx.reply(`–ü–æ—á–µ–º—É ${staff.lastName} ${staff.firstName} –æ—Ç–∫–∞–∑–∞–ª—Å—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è`, {
        reply_markup: { force_reply: true },
      });

      const ctx1 = await conversation
        .waitForReplyTo(question.message_id, {
          otherwise: (ctx) =>
            ctx.reply('–û–®–ò–ë–ö–ê! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', {
              reply_parameters: { message_id: question.message_id },
            }),
        })
        .andFor(':text', { otherwise: (ctx) => ctx.reply('–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º') });

      await conversation.external(() => {
        contactStaff.result = ctx1.msg.text;
        postDataServer('dismissed', contactStaff);
      });

      await ctx.reply(
        `–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç  <b>–ø—Ä–∏–Ω—è—Ç</b>.
  –°–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏—Ç –ª–∏ —á–µ—Ä–µ–∑ 4 –º–µ—Å—è—Ü–∞ —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?`,
        {
          parse_mode: 'HTML',
          reply_parameters: { message_id: question.message_id, quote: question.text },
          reply_markup: new InlineKeyboard()
            .text('–î–∞ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º', '–î–∞ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º')
            .row()
            .text('–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –∑–≤–æ–Ω–∏–º', '–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –∑–≤–æ–Ω–∏–º'),
        },
      );

      const reply = await conversation.waitForCallbackQuery(['–î–∞ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º', '–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –∑–≤–æ–Ω–∏–º'], {
        otherwise: async (ctx) => await ctx.reply(`–û–®–ò–ë–ö–ê!!! –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ ${staff.lastName} ${staff.firstName}`),
      });
      if (reply.callbackQuery.data === '–î–∞ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º') {
        await conversation.external(() => {
          staff.furtherCall = '–î–∞';
          postDataServer('dismissedBot', staff);
        });
        await ctx.reply(
          `–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç  <b>–ø—Ä–∏–Ω—è—Ç</b>. –ß–µ—Ä–µ–∑ 4 –º–µ—Å—è—Ü–∞ —è —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞–º –∑–∞–¥–∞—á—É –Ω–∞ –æ–±–∑–≤–æ–Ω ${staff.lastName} ${staff.firstName}`,
          {
            parse_mode: 'HTML',
          },
        );
      }
      if (reply.callbackQuery.data === '–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –∑–≤–æ–Ω–∏–º') {
        await conversation.external(() => {
          staff.furtherCall = '–ù–µ—Ç';
          postDataServer('dismissedBot', staff);
        });
        await ctx.reply(
          `–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç  <b>–ø—Ä–∏–Ω—è—Ç</b>. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º –∑–≤–æ–Ω–∏—Ç—å ${staff.lastName} ${staff.firstName}`,
          {
            parse_mode: 'HTML',
          },
        );
      }
    }
  }

  // –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è –∑–≤–æ–Ω–∏—Ç—å
  if (survey.callbackQuery.data === '–ù–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º') {
    await survey.answerCallbackQuery(survey.callbackQuery.data);
    let question = await ctx.reply(
      `–í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å ${staff.lastName} ${staff.firstName}`,
      {
        reply_markup: { force_reply: true },
      },
    );
    const ctx1 = await conversation.waitForReplyTo(question.message_id, {
      otherwise: (ctx) =>
        ctx.reply('–û–®–ò–ë–ö–ê!!! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã', {
          reply_parameters: { message_id: question.message_id },
        }),
    });

    await conversation.external(() => {
      contactStaff.result = ctx1.msg.text;
      postDataServer('dismissed', contactStaff);
    });
    await ctx.reply(`–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç  <b>–ø—Ä–∏–Ω—è—Ç</b>`, {
      parse_mode: 'HTML',
    });
  }

  // —Ä–µ–∑–µ—Ä–≤
  if (survey.callbackQuery.data === '–í —Ä–µ–∑–µ—Ä–≤ (–ø–æ–∫–∞ —à—Ç–∞—Ç —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω)') {
    await survey.answerCallbackQuery(survey.callbackQuery.data);
    await conversation.external(() => {
      contactStaff.result = '–í —Ä–µ–∑–µ—Ä–≤ (–ø–æ–∫–∞ —à—Ç–∞—Ç —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω)';
      postDataServer('dismissed', contactStaff);
    });
    await ctx.reply(`–°–ø–∞—Å–∏–±–æ, –í–∞—à –æ—Ç–≤–µ—Ç  <b>–ø—Ä–∏–Ω—è—Ç</b>. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞`, {
      parse_mode: 'HTML',
    });
  }
}