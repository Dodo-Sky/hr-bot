import { type Context } from 'grammy';
import { type Conversation } from '@grammyjs/conversations';
import { getDataFromServer, getStaffFioAndUnit, postDataServer } from '../../services/api';
import { sheetsApi } from '../../services/google';
import { Members, TelegramID } from '../../type/type';
import { addWeeks, setDay, format, addMonths, setDate, addDays, getDay } from 'date-fns';

const SPREADSHEET_ID = '1AF1mudfqU8540NiStIXMpR6y60xxwF_0ZsiZcNyKUM8';

function getDateControl(staffTypeAgent: string) {
  // –±–ª–∏–∂–∞–π—à–∏–π –≤—Ç–æ—Ä–Ω–∏–∫ (–ø–æ –∫—É—Ä—å–µ—Ä–∞–º)
  if (staffTypeAgent == 'Courier') {
    return format(setDay(addWeeks(new Date(), 1), 2, { weekStartsOn: 1 }), 'dd.MM.yyyy');

    // 07 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–±–ª–∏–∂–∞—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
  } else {
    let dataControl = setDate(addMonths(new Date(), 1), 7);
    let day = getDay(dataControl); // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞

    if (day >= 1 && day <= 5) {
      return format(dataControl, 'dd.MM.yyyy'); // –ü–Ω‚Äì–ü—Ç
    }
    if (day === 6) {
      return format(addDays(dataControl, 2), 'dd.MM.yyyy'); // –°–± ‚Üí –ü–Ω
    }
    if (day === 0) {
      return format(addDays(dataControl, 1), 'dd.MM.yyyy'); // –í—Å ‚Üí –ü–Ω
    }
  }
}

export async function friendPayAccepted(conversation: Conversation, ctx: Context) {
  let [, innFriend, payCount, innAgent] = ctx.callbackQuery!.data!.split('+');
  await ctx.reply('–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ. –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ');

  const googleSheetsResponse = await sheetsApi.spreadsheets.values.get({
    range: '–û—Ç—á–µ—Ç!A2:L',
    spreadsheetId: SPREADSHEET_ID,
  });
  const sheetData = googleSheetsResponse.data.values!;

  const members: Members[] = await getDataFromServer('members');

  const member: Members | undefined = members.find(
    (member: Members) => innAgent === member.taxpayerIdentificationNumber,
  );
  if (!member) {
    await ctx.reply('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const staffType = member.staffType;
  const arrInnPay = sheetData.map((row) => String(row[1]) + row[5] + row[8]);

  let rangeNum;
  let fioAgent;
  let fioFriend;
  sheetData.forEach((el, i) => {
    if (arrInnPay.includes(innAgent + innFriend + payCount)) {
      if (String(el[1]) + el[5] + el[8] === innAgent + innFriend + payCount) {
        rangeNum = i + 2;
        fioAgent = el[3];
        fioFriend = el[6];
      }
    }
  });

  await sheetsApi.spreadsheets.values.update({
    range: `–û—Ç—á–µ—Ç!H${rangeNum}:L`,
    spreadsheetId: SPREADSHEET_ID,
    valueInputOption: 'RAW',
    requestBody: {
      values: [['–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ', payCount, '', '–ù–µ—Ç', getDateControl(staffType)]],
    },
  });

  await ctx.reply(
    `–û—Ç—á–µ—Ç
–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ *–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å* –≤—ã–ø–ª–∞—Ç—É –ø—Ä–µ–º–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞".
–ê–≥–µ–Ω—Ç - ${fioAgent}
–î—Ä—É–≥ - ${fioFriend}
–ù–æ–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã - ${payCount}
–°–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω–Ω—ã—Ö. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É`,
    {
      parse_mode: 'Markdown',
    },
  );

  // –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é
  let unitFriend;
  let staffTypeFriend;
  let unitAgent;
  let staffTypeAgent;
  members.forEach((member: Members) => {
    if (member.taxpayerIdentificationNumber === innFriend) {
      unitFriend = member.unitName;
      staffTypeFriend = member.staffType;
    }
    if (member.taxpayerIdentificationNumber === innAgent) {
      unitAgent = member.unitName;
      staffTypeAgent = member.staffType;
    }
  });
  const telegramID: TelegramID[] = await getDataFromServer('tekegramID');
  let chatId: number;
  members.forEach((member: Members) => {
    if (member.taxpayerIdentificationNumber === innAgent) {
      telegramID.forEach(({ id, unitName }) => {
        if (member.staffType === 'Courier') {
          if (unitName == '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞') {
            chatId = id;
          }
        } else {
          if (unitName == '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ') {
            chatId = id;
          }
        }
      });
    }
  });

  await ctx.api.sendMessage(
    chatId!,
    `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ª–∞—Ç–∏—Ç—å 10 000 —Ä—É–±–ª–µ–π (–ø—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ –≤—ã–ø–ª–∞—Ç—É) –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤  –≤ –ø–æ–ª—å–∑—É  *${fioAgent}* –∏–∑ ${unitAgent}
–û—Å–Ω–æ–≤–∞–Ω–∏–µ - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –∏–º/–µ–π –¥—Ä—É–≥ ${fioFriend} —Å–¥–∞–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é (–µ—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫—É—Ö–Ω–∏) –∏–ª–∏ —Ä–∞–∑–≤–µ–∑ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (–∫—É—Ä—å–µ—Ä)`,
    {
      parse_mode: 'Markdown',
    },
  );

  let message;
  if (staffTypeFriend === 'Courier') {
    message = `
  –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –æ–±—ä—è–ª–µ–Ω–∏–µ. –í–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
  
  –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º ${fioAgent} –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞". 
  –ö—É—Ä—å–µ—Ä *${fioFriend}* —Å ${unitFriend} —Ä–∞–∑–≤–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã. 
  –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∫–∞–∫ –ø–æ–ª—É–∏—Ç—å –ø—Ä–µ–º–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ 10000 —Ä—É–±–ª–µ–π —Ä—É–±–ª–µ–πü§óüéä`;
  }

  if (staffTypeFriend === 'KitchenMember') {
    message = `
  –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –æ–±—ä—è–ª–µ–Ω–∏–µ. –í–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    
  –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º *${fioAgent}* –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ "–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞".
   ${fioFriend} —Å ${unitFriend} –ø—Ä–æ—à–µ–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏ —Å—Ç–∞–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º. –£–ø—Ä–∞–≤–ª—è—â–∏–π —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—é –≤ 10 000 —Ä—É–±–ª–µ–πü§óüéä`;
  }

  await ctx.reply(message!, {
    parse_mode: 'Markdown',
  });
}
